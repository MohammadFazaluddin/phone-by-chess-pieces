using ChessPieces;

public class Program
{
    private static void Main(string[] args)
    {
        List<Piece> pieces = new List<Piece>() {
            new Rook(),
            new Knight(),
            new Queen(),
            new King(),
            new Bishop(),
            new Pawn(),
        };

        int count = 0;

        string docPath = Environment.CurrentDirectory
                            .Replace(Path.Combine("bin", "Debug", "net8.0"), "");

        // output the individual count to a text file 
        using StreamWriter file = new StreamWriter(Path.Combine(docPath, "pieces_count.txt"));

        foreach (var piece in pieces)
        {
            string pieceName = piece.GetType().Name;

            file.WriteLineAsync($"Initiating count for piece: {pieceName}.");

            Console.WriteLine($"Initiating count for piece: {pieceName}.");

            // recursive function
            count = GeneratePhoneNumbers(piece);

            Console.WriteLine($"Numbers generated by {pieceName}: {count}");
            file.WriteLineAsync($"Valid numbers generated by {pieceName}: {count}\n");
        }
    }

    public static void GetPhoneNumbers(Piece piece, int startRow, int startCol,
        MoveDirection direction, string phoneNo, int steps, List<string> numList)
    {
        // get a number then try to get all directional possible numbers 
        if (phoneNo.Length >= Board.MaxLength)
        {
            if (!numList.Any(e => e == phoneNo))
            {
                numList.Add(phoneNo);
            }
            return;
        }

        if (phoneNo.StartsWith('0') || phoneNo.StartsWith('1'))
        {
            return;
        }

        if (startCol < 0 || startRow < 0
            || startRow >= Board.keypad.GetLength(0)
            || startCol >= Board.keypad.GetLength(1))
        {
            return;
        }

        if (Board.keypad[startRow, startCol] == '#' || Board.keypad[startRow, startCol] == '*')
        {
            return;
        }

        phoneNo += Board.keypad[startRow, startCol];

        int row = 0, col = 0;
        int directionLen = Enum.GetNames(typeof(MoveDirection)).Length;

        for (int i = 1; i < directionLen; ++i)
        {
            (row, col) = piece.MovePiece(startRow, startCol, (MoveDirection)i, steps);
            GetPhoneNumbers(piece, row, col, (MoveDirection)i, phoneNo, steps, numList);
        }

    }

    public static int GeneratePhoneNumbers(Piece piece)
    {
        int count = 0;

        // for row
        for (int j = 0; j < Board.keypad.GetLength(0); ++j)
        {
            // for columns
            for (int i = 1; i < Board.keypad.GetLength(1); ++i)
            {
                // for taking multiple steps
                for (int step = 1; step < Board.keypad.GetLength(0); ++step)
                {
                    List<string> numberList = new();
                    GetPhoneNumbers(piece, j, i, MoveDirection._, "", step, numberList);
                    count += numberList.Count;
                }
            }
            Console.WriteLine(count);
        }

        return count;
    }

}




