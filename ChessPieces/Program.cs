using ChessPieces.board;
using ChessPieces.pieces;

public class Program
{
    private static void Main(string[] args)
    {
        var pieceMoves = new Dictionary<string, Dictionary<char, List<char>>>
            {
                { "Rook", new Rook(Board.keypad).Moves },
                { "Knight", new Knight(Board.keypad).Moves },
                { "Bishop",new Bishop(Board.keypad).Moves },
                { "Queen", new Queen(Board.keypad).Moves  },
                { "King", new King(Board.keypad).Moves },
                { "Pawn", new Pawn(Board.keypad).Moves },
            };

        string docPath = Environment.CurrentDirectory
                            .Replace(Path.Combine("bin", "Debug", "net8.0"), "");

        // output the individual count to a text file 
        using StreamWriter file = new StreamWriter(Path.Combine(docPath, "pieces_count.txt"));

        foreach (var piece in pieceMoves)
        {
            int count = CountValidNumbers(piece.Value, Board.MaxLength);
            Console.WriteLine($"Valid numbers generated by {piece.Key}: {count}");
            file.WriteLineAsync($"Valid numbers generated by {piece.Key}: {count}\n");
        }


    }

    static int CountValidNumbers(Dictionary<char, List<char>> pieceMoves, int length)
    {
        int totalCount = 0;

        foreach (char startCell in pieceMoves.Keys)
        {
            if (startCell != '1' && startCell != '0')
            {
                totalCount += DepthFirstSearch(pieceMoves, startCell, length - 1);
            }
        }

        return totalCount;
    }

    static int DepthFirstSearch(Dictionary<char, List<char>> pieceMoves, char currentCell, int length)
    {
        if (length == 0)
            return 1;

        int count = 0;

        foreach (char nextCell in pieceMoves[currentCell])
        {
            count += DepthFirstSearch(pieceMoves, nextCell, length - 1);
        }

        return count;
    }

}




